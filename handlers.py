from telegram import Update, ReplyKeyboardMarkup,ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from sheets import add_advertiser_to_sheet, get_bloggers_data
from datetime import datetime

CHOOSING, ADVERTISER_BRAND, ADVERTISER_NICHE, ADVERTISER_BUDGET, ADVERTISER_AUDIENCE = range(5)
BLOGGER_NAME, BLOGGER_LINKS, BLOGGER_CATEGORIES, BLOGGER_TOPIC, BLOGGER_REACH, BLOGGER_PRICE = range(5, 11)

# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORIES = [
    "–ú–æ–¥–∞", "–ö—Ä–∞—Å–æ—Ç–∞", "–§–∏—Ç–Ω–µ—Å –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ì–µ–π–º–µ—Ä—ã –∏ —Å—Ç—Ä–∏–º–µ—Ä—ã",
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏", "–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ –ø—Ä–∏—Ä–æ–¥–∞", "–ú—É–∑—ã–∫–∞ –∏ —Ç–∞–Ω—Ü—ã",
    "–°–µ–º—å—è –∏ –¥–µ—Ç–∏", "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–Æ–º–æ—Ä –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ",
    "–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
]

ADMIN_CHAT_ID = 235130655  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üî∏ –Ø —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å", "üîπ –Ø –±–ª–æ–≥–µ—Ä"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã?", reply_markup=markup)
    return CHOOSING

# === –í—ã–±–æ—Ä —Ä–æ–ª–∏ ===
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = update.message.text
    if "—Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å" in role:
        keyboard = [["üîç –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–≥–µ—Ä–æ–≤", "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]]
        markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        return CHOOSING
    elif "–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–≥–µ—Ä–æ–≤" in role:
        return await handle_show_bloggers(update, context)
    elif "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" in role:
        await update.message.reply_text("1Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        return ADVERTISER_BRAND
    elif "–±–ª–æ–≥–µ—Ä" in role:
        await update.message.reply_text("1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return BLOGGER_NAME

# === –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å: –ø–æ —à–∞–≥–∞–º ===
async def advertiser_brand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["brand"] = update.message.text
    await update.message.reply_text("2Ô∏è‚É£ –ù–∏—à–∞:")
    return ADVERTISER_NICHE

async def advertiser_niche(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["niche"] = update.message.text
    await update.message.reply_text("3Ô∏è‚É£ –ë—é–¥–∂–µ—Ç:")
    return ADVERTISER_BUDGET

async def advertiser_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text("4Ô∏è‚É£ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:")
    return ADVERTISER_AUDIENCE

async def advertiser_audience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["audience"] = update.message.text
    user = update.message.from_user
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    data = [
        "–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å",
        user.first_name,
        f"@{user.username}",
        context.user_data["brand"],
        context.user_data["niche"],
        context.user_data["budget"],
        context.user_data["audience"],
        timestamp
    ]
    add_advertiser_to_sheet(data, sheet_name="–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–∏")

    info = (
        f"\n=== –ó–∞—è–≤–∫–∞ –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è ===\n"
        f"–ò–º—è: {user.first_name} @{user.username}\n"
        f"–ë—Ä–µ–Ω–¥: {context.user_data['brand']}\n"
        f"–ù–∏—à–∞: {context.user_data['niche']}\n"
        f"–ë—é–¥–∂–µ—Ç: {context.user_data['budget']}\n"
        f"–¶–ê: {context.user_data['audience']}\n"
    )

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è:\n{info}")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ. üôå")

    return ConversationHandler.END

# === –ë–ª–æ–≥–µ—Ä: —à–∞–≥–∏ ===
async def save_blogger_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à –±–ª–æ–≥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
    return BLOGGER_LINKS

async def save_blogger_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    link = update.message.text

    if link.lower() == "–≥–æ—Ç–æ–≤–æ":
        return await save_blogger_categories(update, context)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–≥
    context.user_data.setdefault("links", []).append(link)
    await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {link}. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    return BLOGGER_LINKS

async def save_blogger_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["categories"] = []  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£

    keyboard = [[category] for category in CATEGORIES]
    keyboard.append(["–ì–æ—Ç–æ–≤–æ"])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=markup)
    return BLOGGER_TOPIC


async def save_blogger_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text

    if category == "–ì–æ—Ç–æ–≤–æ":
        if not context.user_data["categories"]:
            await update.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
            return BLOGGER_TOPIC

        await update.message.reply_text("4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –æ—Ö–≤–∞—Ç –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞:", reply_markup=ReplyKeyboardRemove())
        return BLOGGER_REACH

    if category not in CATEGORIES:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
        return BLOGGER_TOPIC

    if category not in context.user_data["categories"]:
        context.user_data["categories"].append(category)
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    else:
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

    return BLOGGER_TOPIC


async def save_blogger_reach(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reach"] = update.message.text
    await update.message.reply_text("5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Ä–µ–∫–ª–∞–º—É:")
    return BLOGGER_PRICE

async def save_blogger_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.message.text
    return await finish_blogger(update, context)

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –±–ª–æ–≥–µ—Ä–∞ ===
# handlers.py

async def finish_blogger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    name = context.user_data["name"]
    links = ", ".join(context.user_data.get("links", []))
    categories = ", ".join(context.user_data.get("categories", []))
    reach = context.user_data["reach"]
    price = context.user_data["price"]

    info = (
        f"\n=== –ê–Ω–∫–µ—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ ===\n"
        f"–ò–º—è: {user.first_name} @{user.username}\n"
        f"1. {name}\n2. {links}\n3. {categories}\n4. {reach}\n5. {price}\n"
    )

    with open("zayavki.txt", "a", encoding="utf-8") as file:
        file.write(info)

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –±–ª–æ–≥–µ—Ä–∞:\n{info}")

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data = ["–ë–ª–æ–≥–µ—Ä", user.first_name, f"@{user.username}", name, links, categories, reach, price, timestamp]

    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä sheet_name –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏
    add_advertiser_to_sheet(data, sheet_name="–ë–ª–æ–≥–µ—Ä—ã")

    await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –¥–æ–±–∞–≤–∏–º –≤–∞—Å –≤ –±–∞–∑—É.")
    return ConversationHandler.END


# === –ü—Ä–æ—Å–º–æ—Ç—Ä –±–ª–æ–≥–µ—Ä–æ–≤ ===
async def handle_show_bloggers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bloggers = get_bloggers_data()
    if not bloggers:
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤ –±–∞–∑–µ –Ω–µ—Ç –±–ª–æ–≥–µ—Ä–æ–≤.")
        return CHOOSING

    message = "üìã –°–ø–∏—Å–æ–∫ –±–ª–æ–≥–µ—Ä–æ–≤:\n\n"
    for blogger in bloggers:
        message += (
            f"üë§ {blogger['–ò–º—è –∞–Ω–∫–µ—Ç—ã']}\n"
            f"üîó {blogger['–°—Å—ã–ª–∫–∞']}\n"
            f"üìå {blogger['–¢–µ–º–∞—Ç–∏–∫–∞']}\n"
            f"üë• –û—Ö–≤–∞—Ç: {blogger['–û—Ö–≤–∞—Ç']}\n"
            f"üí∞ –¶–µ–Ω–∞: {blogger['–¶–µ–Ω–∞']}\n\n"
        )

    await update.message.reply_text(message[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    return CHOOSING

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª–∏ üòå")
    return ConversationHandler.END
